#!/usr/bin/env php
<?php

// php forker --process="..."
// php forker --process="..." --restart=1
// php forker --process="..." --stop=1
// php forker --process="..." --process-param1="param1" --process-param2=2
// php forker --process="..." --count=5 ...

// Detect autoload location
$autoload = [
    __DIR__ . '/../vendor/autoload.php', // The forker located in development.
    __DIR__ . '/../../../autoload.php', // The forker located at "vendor/mrden/forker/bin".
    __DIR__ . '/../autoload.php', // The forker located at "vendor/bin".
];
$includes = [
    __DIR__ . '/..',
    __DIR__ . '/../../../mrden/forker',
    __DIR__ . '/../mrden/forker',
];
$includePath = false;
for ($i = 0; $i < \count($autoload); $i++) {
    if (\file_exists($autoload[$i]) && \is_dir($includes[$i])) {
        require $autoload[$i];
        $includePath = $includes[$i];
        break;
    }
}
if (empty($includePath)) {
    \fwrite(\STDERR, "Error: The `autoload.php` file not found in:" . PHP_EOL);
    for ($i = 0; $i < \count($autoload); $i++) {
        $a = \file_exists($autoload[$i]) ? 'true' : 'false';
        $b = \is_dir($includes[$i]) ? 'true' : 'false';
        \fwrite(\STDERR, "  - file_exists($autoload[$i]) = $a" . PHP_EOL);
        \fwrite(\STDERR, "    is_dir($includes[$i]) = $b") . PHP_EOL;
    }
    exit(1);
}
$processClassName = '';
$processParams = [];
$count = 1;
$restart = false;
$stop = false;
foreach ($argv as $i => $arg) {
    if (\preg_match('/^--process=(?<process>.+)$/', $arg, $match)) {
        $processClassName = $match['process'];
    }
    if (\preg_match('/^--process-(?<key>.+)=(?<value>.+)$/', $arg, $match)) {
        $processParams[$match['key']] = $match['value'];
    }
    if (\preg_match('/^--stop=(?<value>.+)$/', $arg, $match)) {
        $stop = in_array($match['value'], [1, '1', 'true']);
    }
    if (\preg_match('/^--restart=(?<value>.+)$/', $arg, $match)) {
        $restart = in_array($match['value'], [1, '1', 'true']);
    }
    if (\preg_match('/^--count=(?<value>.+)$/', $arg, $match)) {
        $count = (int)$match['value'];
    }
}

if (!$count) {
    \fwrite(\STDERR, "Error: Incorrect count value \"$count\"." . PHP_EOL);
    exit(1);
}

if (!$processClassName || !\class_exists($processClassName)) {
    \fwrite(\STDERR, "Error: The process $processClassName not found." . PHP_EOL);
    exit(1);
}
/**
 * @var $process \Mrden\Fork\AbstractProcess
 */
try {
    $process = new $processClassName($processParams);
} catch (\Mrden\Fork\Exceptions\ParamException $e) {
    \fwrite(\STDERR, "Error: {$e->getMessage()}" . PHP_EOL);
    exit(1);
}

$forker = new \Mrden\Fork\Forker($process);
if ($stop) {
    $forker->stop();
} else {
    try {
        $forker->run($count);
    } catch (\Mrden\Fork\Exceptions\ForkException $e) {
        \fwrite(\STDERR, "Error: {$e->getMessage()}" . PHP_EOL);
        exit(1);
    }
}

