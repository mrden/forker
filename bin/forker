#!/usr/bin/env php
<?php

use Mrden\Forker\Contracts\Forkable;
use Mrden\Forker\Forker;

// Detect autoload location
$autoload = [
    __DIR__ . '/../vendor/autoload.php', // The forker located in development.
    __DIR__ . '/../../../autoload.php', // The forker located at "vendor/mrden/forker/bin".
    __DIR__ . '/../autoload.php', // The forker located at "vendor/bin".
];
$includes = [
    __DIR__ . '/..',
    __DIR__ . '/../../../mrden/forker',
    __DIR__ . '/../mrden/forker',
];
$includePath = false;
for ($i = 0; $i < \count($autoload); $i++) {
    if (\file_exists($autoload[$i]) && \is_dir($includes[$i])) {
        require $autoload[$i];
        $includePath = $includes[$i];
        break;
    }
}
if (empty($includePath)) {
    \fwrite(\STDERR, "Error: The `autoload.php` file not found in:" . PHP_EOL);
    for ($i = 0; $i < \count($autoload); $i++) {
        $a = \file_exists($autoload[$i]) ? 'true' : 'false';
        $b = \is_dir($includes[$i]) ? 'true' : 'false';
        \fwrite(\STDERR, "  - file_exists($autoload[$i]) = $a" . PHP_EOL);
        \fwrite(\STDERR, "    is_dir($includes[$i]) = $b") . PHP_EOL;
    }
    exit(1);
}
$processClassName = '';
$processParams = [];
$count = null;
$cloneNumber = null;
$stop = false;
$restart = false;
foreach ($argv as $i => $arg) {
    if (\preg_match('/^--process=(?<process>.+)$/', $arg, $match)) {
        $processClassName = $match['process'];
    }
    if (\preg_match('/^--process-(?<key>.+)=(?<value>.+)$/', $arg, $match)) {
        $value = $match['value'];
        if (\ctype_digit($value)) {
            $value = (int)$value;
        } elseif (\is_numeric($value)) {
            $value = (float)$value;
        } else {
            $value = $value === 'false' ? false : $value;
            $value = $value === 'true' ? true : $value;
        }
        $processParams[$match['key']] = $value;
    }
    if (\preg_match('/^--restart=(?<value>.+)$/', $arg, $match)) {
        $restart = \in_array($match['value'], [1, '1', 'true']);
    }
    if (\preg_match('/^--stop=(?<value>.+)$/', $arg, $match)) {
        $stop = \in_array($match['value'], [1, '1', 'true']);
        $restart = false;
    }
    if (\preg_match('/^--count=(?<value>.+)$/', $arg, $match)) {
        $count = (int)$match['value'];
    }

    if (\preg_match('/^--clone_number=(?<value>.+)$/', $arg, $match)) {
        $cloneNumber = (int)$match['value'];
    }
}

if ($count === null) {
    $count = $stop ? -1 : ($cloneNumber > 0 ? $cloneNumber : 1);
}

if (!$processClassName || !\class_exists($processClassName)) {
    \fwrite(\STDERR, "Error: The --process \"$processClassName\" not found." . PHP_EOL);
    exit(1);
}

if (!\is_numeric($count) || !$count) {
    \fwrite(\STDERR, "Error: Incorrect --count value \"$count\"." . PHP_EOL);
    exit(1);
}

/**
 * @psalm-var string<Forkable> $processClassName
 * @var Forkable $process
 */
try {
    $process = new $processClassName($processParams);
    $forker = new Forker($process);
    if ($restart) {
        $forker->restart($count, $cloneNumber);
    } elseif ($stop) {
        $forker->stop($count, $cloneNumber);
    } else {
        $forker->run($count, $cloneNumber);
    }
} catch (\Exception $e) {
    \fwrite(\STDERR, "Error: {$e->getMessage()}" . PHP_EOL);
    exit(1);
}
